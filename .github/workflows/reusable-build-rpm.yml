name: Reusable build RPM

on:
  workflow_call:
    inputs:
      spec:
        required: true
        type: string
      reclaim:
        required: false
        type: boolean
      deps:
        required: false
        type: string
      additional_packages:
        required: false
        type: string
      debuginfo:
        required: false
        default: true
        type: boolean
    secrets:
      gpgkey:
        required: true
    outputs:
      pkgname:
        value: ${{ jobs.build.outputs.pkgname }}

jobs:
  build:
    name: ${{ inputs.spec }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    container:
      image: ghcr.io/solopasha/kde6-copr/buildroot:latest
      options: --cap-add SYS_ADMIN --device /dev/fuse --security-opt apparmor:unconfined --volume /:/run/host:rw
    outputs:
      pkgname: ${{ steps.pkgname.outputs.pkgname }}
    env:
      spec: ${{ inputs.spec }}
      repository: ${{ github.repository }}

    steps:
      - name: Reclaim disk space
        if: inputs.reclaim
        run: |
          rm -rf \
            /run/host/opt/ghc \
            /run/host/opt/hostedtoolcache \
            /run/host/usr/lib/google-cloud-sdk \
            /run/host/usr/lib/jvm \
            /run/host/usr/local/.ghcup \
            /run/host/usr/local/lib/android \
            /run/host/usr/local/share/boost \
            /run/host/usr/local/share/powershell \
            /run/host/usr/share/dotnet \
            /run/host/usr/share/swift \
            /run/host/var/lib/apt/lists/* || :

      - name: Determine target branch
        env:
          pr_ref: ${{ github.event.pull_request.base.ref }}
          ref: ${{ github.ref_name }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            branch="${pr_ref}"
          else
            branch="${ref}"
          fi

          if [[ "${branch}" == "main" ]]; then
            echo "target_branch=${branch}" >> $GITHUB_ENV
          else
            exit 1
          fi

      - name: Get pkgname
        id: pkgname
        run: |
          specfile="$(basename "${spec}")"
          echo "pkgname=${specfile%.*}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Configs
        run: |
          cat << 'EOF' > /etc/mock/fedora-build.cfg
          include('/etc/mock/fedora-${{ vars.RELEASEVER }}-x86_64.cfg')

          config_opts['root'] = 'fedora-build'
          config_opts['resultdir'] = "/var/lib/mock/${{ steps.pkgname.outputs.pkgname }}-resultdir"

          config_opts['nosync'] = True
          config_opts['nosync_force'] = True
          config_opts['print_main_output'] = True
          config_opts['cleanup_on_success'] = False
          config_opts['cleanup_on_failure'] = False
          config_opts['plugin_conf']['root_cache_enable'] = False

          config_opts['chroot_additional_packages'] = '${{ inputs.additional_packages }}'
          EOF

          cat << EOF >> /etc/mock/fedora-build.cfg
          config_opts['dnf.conf'] += """
          [build]
          name=build
          baseurl=file://${GITHUB_WORKSPACE}/repo/
          skip_if_unavailable=True
          gpgcheck=1
          gpgkey=https://raw.githubusercontent.com/solopasha/kde6-copr/refs/heads/unstable/RPM-GPG-KEY-solopasha
          repo_gpgcheck=0
          enabled=1
          enabled_metadata=1
          priority=97
          """
          EOF

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          cat << EOF >> /etc/mock/fedora-build.cfg
          config_opts['dnf.conf'] += """
          [pr-build]
          name=pr-build
          baseurl=file://${GITHUB_WORKSPACE}/pr-repo/
          skip_if_unavailable=True
          gpgcheck=0
          repo_gpgcheck=0
          enabled=1
          enabled_metadata=1
          priority=96
          """
          EOF
          fi

      - name: Set up ORAS
        uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20

      - name: Fetch build deps
        env:
          DEPS: ${{ inputs.deps }}
        run: |
          mapfile -t repo_dependencies < <(jq -r 'del(."changed-files") | keys[]' <<< "$DEPS")
          if [[ "${repo_dependencies[*]}" != "" ]]; then
            mkdir -p repo
            for dep in "${repo_dependencies[@]}"; do
              oras pull "ghcr.io/${repository}/${dep}:latest-${target_branch}"
              mv ./"$dep"-resultdir/*.rpm repo
            done
            createrepo_c repo
          fi

      - name: Fetch build deps (PR)
        if: github.event_name == 'pull_request'
        env:
          DEPS: ${{ inputs.deps }}
          pr_number: ${{ github.event.number }}
        run: |
          mapfile -t pr_dependencies < <(jq -r 'del(."changed-files") | to_entries | map(select(.value.result == "success")) | .[].key' <<< "$DEPS")
          if [[ "${pr_dependencies[*]}" != "" ]]; then
            mkdir -p pr-repo
            for dep in "${pr_dependencies[@]}"; do
              oras pull "ghcr.io/${repository}/${dep}:pr-${pr_number}" -o pr-${pr_number}
              mv ./pr-${pr_number}/"$dep"-resultdir/*.rpm pr-repo
            done
            createrepo_c pr-repo
          fi

      - name: Get arch
        id: arch
        run: |
          arch="$(rpmspec -q --srpm --qf '%{ARCH}' "${spec}")"
          echo "arch=${arch}" >> $GITHUB_OUTPUT

      - name: Get package version
        id: pkgver
        run: |
          version="$(rpmspec -q --srpm --qf '%{VERSION}' "${spec}")"
          echo "version=${version}" >> $GITHUB_OUTPUT
          vr="$(rpmspec -q --srpm --qf '%{VERSION}-%{RELEASE}' "${spec}")"
          echo "vr=${vr}" >> $GITHUB_OUTPUT
          container_tag="$(echo "$vr" | sed 's/\^/_post_/;s/\~/_pre_/')"
          echo "container_tag=${container_tag}" >> $GITHUB_OUTPUT

      - name: Check NVR
        env:
          pkgname: ${{ steps.pkgname.outputs.pkgname }}
          version_release: ${{ steps.pkgver.outputs.vr }}
          container_tag: ${{ steps.pkgver.outputs.container_tag }}
        run: |
          if oras manifest fetch ghcr.io/${repository}/${pkgname}:${container_tag} &> /dev/null; then
            echo "NVR already exists"
            exit 1
          fi
          latest_version="$(oras manifest fetch ghcr.io/${repository}/${pkgname}:latest-${target_branch} | jq -r '.annotations."rpm.version"')"
          if [[ -n "${latest_version}" ]]; then
            rpmdev-vercmp "${latest_version}" "${version_release}" || ec=$?
            case $ec in
                0) ;;
                11) echo "NVR went backwards"; exit 1 ;;
                12) ;;
                *) exit 1
            esac
          fi

      - name: Download sources
        env:
          max_retries: 10
          sleep_seconds: 10
        run: |
          sourcetar="$(spectool --lf -s0 "${spec}" | xargs -I ,, basename ,,)"
          if [[ ! "${sourcetar}" =~ \.(tar(\..+)?|run)$ ]]; then
            exit 0
          fi

          for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
            spectool -g "${spec}" -C "$(dirname "${spec}")"

            if [[ -f "$(dirname "${spec}")/${sourcetar}" ]]; then
              exit 0
            fi

            if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                sleep $sleep_seconds
            fi
          done

          echo "Failed after $max_retries attempts"
          exit 1

      - name: Build
        env:
          pkgname: ${{ steps.pkgname.outputs.pkgname }}
        run: |
          su -c "mock -r fedora-build --spec ${spec} --sources $(dirname "${spec}")" builduser
          rm /var/lib/mock/"${pkgname}"-resultdir/*.src.rpm
          mv "/var/lib/mock/${pkgname}-resultdir/" .

      - name: Sign
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          GPGKEY: ${{ secrets.gpgkey }}
          pkgname: ${{ steps.pkgname.outputs.pkgname }}
          repository_owner: ${{ github.repository_owner }}
        run: |
          echo "${GPGKEY}" | gpg --import
          rpm -D "%_gpg_name ${repository_owner}" --addsign ./"${pkgname}"-resultdir/*.rpm

      - name: Handle debuginfo
        if: steps.arch.outputs.arch != 'noarch'
        env:
          debuginfo: ${{ inputs.debuginfo }}
          pkgname: ${{ steps.pkgname.outputs.pkgname }}
        run: |
          if [[ "${debuginfo}" != "true" ]]; then
            rm "${pkgname}"-resultdir/*{debuginfo,debugsource}*.rpm || :
          else
            mkdir -p "${pkgname}-debuginfo"
            mv "${pkgname}"-resultdir/*{debuginfo,debugsource}*.rpm "${pkgname}-debuginfo"
          fi

      - name: Upload build results
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          pkgname: ${{ steps.pkgname.outputs.pkgname }}
          container_tag: ${{ steps.pkgver.outputs.container_tag }}
          version_release: ${{ steps.pkgver.outputs.vr }}
          max_retries: 7
          sleep_seconds: 7
        run: |
          oras login ghcr.io --password "${{ secrets.GITHUB_TOKEN }}" -u "${{ github.actor }}"

          for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
              if oras push \
                  --annotation "rpm.version=${version_release}" \
                  "ghcr.io/${repository}/${pkgname}:latest-${target_branch},${container_tag}" \
                  "./${pkgname}-resultdir"; then
                  exit 0
              fi

              if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                  echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                  sleep $sleep_seconds
              fi
          done

          echo "Failed after $max_retries attempts"
          exit 1

      - name: Upload build results (PR)
        if: github.event_name == 'pull_request'
        env:
          pkgname: ${{ steps.pkgname.outputs.pkgname }}
          version_release: ${{ steps.pkgver.outputs.vr }}
          pr_number: ${{ github.event.number }}
          max_retries: 7
          sleep_seconds: 7
        run: |
          oras login ghcr.io --password "${{ secrets.GITHUB_TOKEN }}" -u "${{ github.actor }}"

          for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
              if oras push \
                  --annotation "rpm.version=${version_release}" \
                  "ghcr.io/${repository}/${pkgname}:pr-${pr_number}" \
                  "./${pkgname}-resultdir"; then
                  exit 0
              fi

              if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                  echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                  sleep $sleep_seconds
              fi
          done

          echo "Failed after $max_retries attempts"
          exit 1

      - name: Upload debuginfo
        if: inputs.debuginfo && steps.arch.outputs.arch != 'noarch' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        env:
          pkgname: ${{ steps.pkgname.outputs.pkgname }}
          container_tag: ${{ steps.pkgver.outputs.container_tag }}
          version_release: ${{ steps.pkgver.outputs.vr }}
          max_retries: 7
          sleep_seconds: 7
        run: |
          for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
              if oras push \
                  --annotation "rpm.version=${version_release}" \
                  "ghcr.io/${repository}/${pkgname}:debuginfo-${target_branch},${container_tag}-debuginfo" \
                  "./${pkgname}-debuginfo"; then
                  exit 0
              fi

              if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                  echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                  sleep $sleep_seconds
              fi
          done

          echo "Failed after $max_retries attempts"
          exit 1
