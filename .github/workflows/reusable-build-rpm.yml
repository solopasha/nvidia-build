name: Reusable build RPM

on:
  workflow_call:
    inputs:
      spec:
        required: true
        type: string
      reclaim:
        required: false
        type: boolean
      deps:
        required: false
        type: string
      additional_packages:
        required: false
        type: string
      debuginfo:
        required: false
        default: true
        type: boolean
    secrets:
      gpgkey:
        required: true
    outputs:
      pkgname:
        value: ${{ jobs.build.outputs.pkgname }}

jobs:
  build:
    name: ${{ inputs.spec }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      pkgname: ${{ steps.pkgname.outputs.pkgname }}
    env:
      spec: ${{ inputs.spec }}
      repository: ${{ github.repository }}

    steps:
      - name: Free up disk space
        if: inputs.reclaim
        run: |
          sudo rm -rf /opt/ghc /usr/local/.ghcup || true
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/share/gradle-*
          sudo rm -rf /usr/local/julia* /usr/share/java /usr/share/kotlinc
          sudo rm -rf /opt/az /opt/microsoft /opt/pipx
          sudo rm -rf /usr/share/miniconda /home/runner/.rustup /home/packer/.rustup /home/runneradmin/.rustup
          sudo rm -rf /etc/skel/.rustup /opt/google-cloud-sdk
          sudo rm -rf /usr/share/az_* /opt/google /usr/lib/firefox /usr/local/aws-*
          sudo rm -rf /usr/libexec/gcc /opt/actionarchivecache
          sudo rm -rf /var/lib/mysql /usr/local/n
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet /usr/share/swift
          sudo rm -rf /usr/local/share/boost /usr/local/share/powershell
          sudo rm -rf /usr/lib/google-cloud-sdk /usr/lib/jvm
          sudo rm -rf /usr/local/graalvm /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/lib/dotnet /usr/lib/php /usr/share/mysql
          sudo rm -rf /usr/lib/llvm-*
          sudo rm -rf /usr/lib/mono
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/*

      - name: Determine target branch
        env:
          pr_ref: ${{ github.event.pull_request.base.ref }}
          ref: ${{ github.ref_name }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            branch="${pr_ref}"
          else
            branch="${ref}"
          fi

          if [[ "${branch}" == "main" ]]; then
            echo "target_branch=${branch}" >> $GITHUB_ENV
          else
            exit 1
          fi

      - name: Get pkgname
        id: pkgname
        run: |
          specfile="$(basename "${spec}")"
          echo "pkgname=${specfile%.*}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Configs
        run: |
          cat << 'EOF' >> fedora-build.repo
          [build]
          name=build
          baseurl=file:///repo/
          skip_if_unavailable=True
          gpgcheck=1
          gpgkey=https://raw.githubusercontent.com/solopasha/kde6-copr/refs/heads/unstable/RPM-GPG-KEY-solopasha
          repo_gpgcheck=0
          enabled=1
          enabled_metadata=1
          priority=97
          EOF

          cat << 'EOF' > dnf.conf
          [main]
          max_parallel_downloads=20
          logfile=/var/log/yum.log
          retries=20
          obsoletes=1
          gpgcheck=1
          assumeyes=1
          install_weak_deps=0
          metadata_expire=0
          best=1
          protected_packages=
          EOF

          cat << 'EOF' > .rpmmacros
          %_topdir /build
          EOF

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          cat << EOF >> fedora-build.repo
          [pr-build]
          name=pr-build
          baseurl=file:///pr-repo/
          skip_if_unavailable=True
          gpgcheck=0
          repo_gpgcheck=0
          enabled=1
          enabled_metadata=1
          priority=96
          EOF
          fi

      - name: Set up ORAS
        uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20

      - name: Fetch build deps
        env:
          DEPS: ${{ inputs.deps }}
        run: |
          mapfile -t repo_dependencies < <(jq -r 'del(."changed-files") | keys[]' <<< "$DEPS")
          if [[ "${repo_dependencies[*]}" != "" ]]; then
            for dep in "${repo_dependencies[@]}"; do
              oras pull "ghcr.io/${repository}/${dep}:latest-${target_branch}" -o repo
            done
            docker run --rm \
              --cap-drop all \
              --network none \
              --entrypoint="" \
              -v "${GITHUB_WORKSPACE}/repo:/work" \
              -w /work \
              ghcr.io/solopasha/kde6-copr/buildroot:latest \
              createrepo_c .
          fi

      - name: Fetch build deps (PR)
        if: github.event_name == 'pull_request'
        env:
          DEPS: ${{ inputs.deps }}
          pr_number: ${{ github.event.number }}
        run: |
          mapfile -t pr_dependencies < <(jq -r 'del(."changed-files") | to_entries | map(select(.value.result == "success")) | .[].key' <<< "$DEPS")
          if [[ "${pr_dependencies[*]}" != "" ]]; then
            for dep in "${pr_dependencies[@]}"; do
              oras pull "ghcr.io/${repository}/${dep}:pr-${pr_number}" -o pr-repo
            done
            docker run --rm \
              --cap-drop all \
              --network none \
              --entrypoint="" \
              -v "${GITHUB_WORKSPACE}/pr-repo:/work" \
              -w /work \
              ghcr.io/solopasha/kde6-copr/buildroot:latest \
              createrepo_c .
          fi

      - name: Get arch
        id: arch
        run: |
          docker run --rm \
            --cap-drop all \
            --network none \
            --entrypoint="" \
            -v "${GITHUB_WORKSPACE}/$(dirname "${spec}"):/work:ro" \
            -w /work \
            -e pkgname \
            ghcr.io/solopasha/kde6-copr/buildroot:latest \
            /bin/bash -c '
              rpmspec -q --srpm --qf '%{ARCH}' "${pkgname}.spec"
            ' > arch
          echo "arch=$(cat arch)" >> $GITHUB_OUTPUT

      - name: Get package version
        id: pkgver
        run: |
          docker run --rm \
            --cap-drop all \
            --network none \
            --entrypoint="" \
            -v "${GITHUB_WORKSPACE}/$(dirname "${spec}"):/work:ro" \
            -w /work \
            -e pkgname \
            ghcr.io/solopasha/kde6-copr/buildroot:latest \
            /bin/bash -c '
              rpmspec -q --srpm --qf '%{VERSION}-%{RELEASE}' "${pkgname}.spec"
            ' > version_release
          docker run --rm \
            --cap-drop all \
            --network none \
            --entrypoint="" \
            -v "${GITHUB_WORKSPACE}/$(dirname "${spec}"):/work:ro" \
            -w /work \
            -e pkgname \
            ghcr.io/solopasha/kde6-copr/buildroot:latest \
            /bin/bash -c '
              rpmspec -q --srpm --qf '%{VERSION}' "${pkgname}.spec"
            ' > version
          echo "version_release=$(cat version_release)" >> $GITHUB_ENV
          echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Get container tag
        run: |
          echo "container_tag=$(echo "${version_release}" | sed 's/\^/_post_/;s/\~/_pre_/')" >> $GITHUB_ENV

      - name: Check NVR
        run: |
          if oras manifest fetch ghcr.io/${repository}/${pkgname}:${container_tag} &> /dev/null; then
            echo "NVR already exists"
            exit 1
          fi
          latest_version="$(oras manifest fetch ghcr.io/${repository}/${pkgname}:latest-${target_branch} | jq -r '.annotations."rpm.version"')"
          if [[ -n "${latest_version}" ]]; then
            export latest_version
            docker run --rm \
              --cap-drop all \
              --network none \
              --entrypoint="" \
              -e latest_version \
              -e version_release \
              ghcr.io/solopasha/kde6-copr/buildroot:latest \
              /bin/bash -c '
                rpmdev-vercmp "${latest_version}" "${version_release}" || ec=$?
                case $ec in
                    11) echo "NVR went backwards"; exit 1 ;;
                    12) ;;
                    *) exit 1
                esac
              '
          fi

      - name: Download sources
        env:
          max_retries: 10
          sleep_seconds: 10
        run: |
          mkdir "${GITHUB_WORKSPACE}/sources"
          docker run --rm \
            --cap-drop all \
            --entrypoint="" \
            -v "${GITHUB_WORKSPACE}/$(dirname "${spec}"):/work:ro" \
            -v "${GITHUB_WORKSPACE}/sources:/sources" \
            -w /work \
            -e pkgname \
            -e max_retries \
            -e sleep_seconds \
            ghcr.io/solopasha/kde6-copr/buildroot:latest \
            /bin/bash -c '
              sourcetar="$(spectool --lf -s0 "${pkgname}.spec" | xargs -I ,, basename ,,)"
              if [[ ! "${sourcetar}" =~ \.(tar(\..+)?|run)$ ]]; then
                exit 0
              fi

              for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
                spectool -g "${pkgname}.spec" -C /sources

                if [[ -f "/sources/${sourcetar}" ]]; then
                  exit 0
                fi

                if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                    echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                    sleep $sleep_seconds
                fi
              done

              echo "Failed after $max_retries attempts"
              exit 1
            '
          find sources -type f -exec mv -t "$(dirname "${spec}")" {} +

      - name: Create buildroot
        run: |
            buildah from -q --retry 15 --retry-delay 5s --name build \
              -v "${GITHUB_WORKSPACE}/fedora-build.repo:/etc/yum.repos.d/fedora-build.repo:ro" \
              -v "${GITHUB_WORKSPACE}/$(dirname "${spec}"):/work:ro" \
              -v "${GITHUB_WORKSPACE}/dnf.conf:/etc/dnf/dnf.conf:ro" \
              -v "${GITHUB_WORKSPACE}/repo:/repo:ro" \
              -v "${GITHUB_WORKSPACE}/pr-repo:/pr-repo:ro" \
              registry.fedoraproject.org/fedora:${{ vars.RELEASEVER }}
            buildah run -e "pkgname=${pkgname}" build /usr/bin/bash <<'EOF'
            set -e
            useradd -M -u 1001 builduser
            mkdir /out && chown builduser:builduser /out
            mkdir /build && chown builduser:builduser /build
            dnf -y install nosync
            LD_PRELOAD=/usr/lib64/nosync/nosync.so dnf -y install @buildsys-build 'dnf5-command(builddep)' ${{ inputs.additional_packages }}
            LD_PRELOAD=/usr/lib64/nosync/nosync.so dnf -y builddep --allowerasing --no-allow-downgrade /work/${pkgname}.spec
            while [[ "$ec" != "0" ]]; do
              ec=0
              setpriv --clear-groups --reuid builduser --regid builduser \
                --no-new-privs --inh-caps=-all --reset-env -- \
                rpmbuild -bd ${extra_args} /work/${pkgname}.spec \
                  --define "_topdir /build" \
                  --define "_srcrpmdir /out" \
                  --define "_sourcedir /work" || ec=$?
              counter=$((counter+1))
              if [[ "${counter}" -ge "1" ]]; then
                extra_args="--noprep"
              fi
              if [[ "$ec" == "0" ]]; then
                break
              elif [[ "$ec" == "11" ]]; then
                LD_PRELOAD=/usr/lib64/nosync/nosync.so dnf -y builddep --allowerasing --no-allow-downgrade /out/${pkgname}*.buildreqs.nosrc.rpm
              else
                exit 1
              fi
            done
            dnf clean all
            rm -rf /out/* /build/*
            EOF
            buildah config --user builduser build
            buildah commit build docker-daemon:buildcontainer:latest
            buildah rm build
            buildah prune --all --force

      - name: Build
        env:
          repository_owner: ${{ github.repository_owner }}
        run: |
          mkdir "${GITHUB_WORKSPACE}/${pkgname}-resultdir"
          docker run --rm \
            --cap-drop all \
            --network none \
            --entrypoint="" \
            -v "${GITHUB_WORKSPACE}/$(dirname "${spec}"):/work:ro" \
            -v "${GITHUB_WORKSPACE}/${pkgname}-resultdir:/out" \
            -v "${GITHUB_WORKSPACE}/.rpmmacros:/home/builduser/.rpmmacros:ro" \
            -w /work \
            -e pkgname \
            -e repository_owner \
            buildcontainer:latest \
            /bin/bash -c '
              rpmbuild -bs ./${pkgname}.spec \
                --define "_sourcedir ${PWD}" \
                --define "_srcrpmdir /out" \
                --define "_topdir /build"
              rpmbuild -rb /out/${pkgname}*.src.rpm \
                --define "_rpmdir /out" \
                --define "_rpmfilename %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" \
                --define "_topdir /build" \
                --define "dist .fc${{ vars.RELEASEVER }}" \
                --define "vendor ${repository_owner}"
            '
          rm "${GITHUB_WORKSPACE}/${pkgname}-resultdir"/*.src.rpm

      - name: Sign
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          GPGKEY: ${{ secrets.gpgkey }}
          repository_owner: ${{ github.repository_owner }}
        run: |
          docker run --rm \
            --cap-drop all \
            --network none \
            --entrypoint="" \
            -v "${GITHUB_WORKSPACE}/${pkgname}-resultdir:/work" \
            --tmpfs /home/builduser/.gnupg:uid=1001,gid=1001,mode=0700 \
            -w /work \
            -e GPGKEY \
            -e repository_owner \
            ghcr.io/solopasha/kde6-copr/buildroot:latest \
            /bin/bash -c '
              echo "${GPGKEY}" | gpg --import
              rpm -D "%_gpg_name ${repository_owner}" --addsign ./*.rpm
            '

      - name: Handle debuginfo
        if: steps.arch.outputs.arch != 'noarch'
        env:
          debuginfo: ${{ inputs.debuginfo }}
        run: |
          if [[ "${debuginfo}" != "true" ]]; then
            rm "${pkgname}"-resultdir/*{debuginfo,debugsource}*.rpm || :
          else
            mkdir -p "${pkgname}-debuginfo"
            mv "${pkgname}"-resultdir/*{debuginfo,debugsource}*.rpm "${pkgname}-debuginfo"
          fi

      - name: Upload build results
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          max_retries: 7
          sleep_seconds: 7
        run: |
          oras login ghcr.io --password "${{ secrets.GITHUB_TOKEN }}" -u "${{ github.actor }}"

          for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
              if oras push \
                  --annotation "rpm.version=${version_release}" \
                  "ghcr.io/${repository}/${pkgname}:latest-${target_branch},${container_tag},${version}" \
                  "./${pkgname}-resultdir"; then
                  exit 0
              fi

              if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                  echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                  sleep $sleep_seconds
              fi
          done

          echo "Failed after $max_retries attempts"
          exit 1

      - name: Upload build results (PR)
        if: github.event_name == 'pull_request'
        env:
          pr_number: ${{ github.event.number }}
          max_retries: 7
          sleep_seconds: 7
        run: |
          oras login ghcr.io --password "${{ secrets.GITHUB_TOKEN }}" -u "${{ github.actor }}"

          for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
              if oras push \
                  --annotation "rpm.version=${version_release}" \
                  "ghcr.io/${repository}/${pkgname}:pr-${pr_number}" \
                  "./${pkgname}-resultdir"; then
                  exit 0
              fi

              if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                  echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                  sleep $sleep_seconds
              fi
          done

          echo "Failed after $max_retries attempts"
          exit 1

      - name: Upload debuginfo
        if: inputs.debuginfo && steps.arch.outputs.arch != 'noarch' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        env:
          max_retries: 7
          sleep_seconds: 7
        run: |
          for (( retry_count=0; retry_count<max_retries; retry_count++ )); do
              if oras push \
                  --annotation "rpm.version=${version_release}" \
                  "ghcr.io/${repository}/${pkgname}:debuginfo-${target_branch},${container_tag}-debuginfo,${version}-debuginfo" \
                  "./${pkgname}-debuginfo"; then
                  exit 0
              fi

              if [[ $retry_count -lt $((max_retries - 1)) ]]; then
                  echo "Attempt $((retry_count + 1)) failed. Retrying in $sleep_seconds seconds..."
                  sleep $sleep_seconds
              fi
          done

          echo "Failed after $max_retries attempts"
          exit 1
